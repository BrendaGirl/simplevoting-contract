// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleVoting {
    struct Option {
        string name;
        uint256 voteCount;
    }

    // Array to store the available options
    Option[] public options;

    // Mapping to keep track of whether an address has voted
    mapping(address => bool) public hasVoted;

    // Event to log when a vote is cast
    event VoteCast(address indexed voter, uint256 indexed optionIndex);

    // Constructor to initialize the voting options
    constructor(string[] memory _optionNames) {
        for (uint256 i = 0; i < _optionNames.length; i++) {
            options.push(Option({
                name: _optionNames[i],
                voteCount: 0
            }));
        }
    }


    function vote(uint256 _optionIndex) external {

        require(!hasVoted[msg.sender], "You have already voted");

        require(_optionIndex < options.length, "Invalid option index");

        options[_optionIndex].voteCount++;

        hasVoted[msg.sender] = true;

 
        emit VoteCast(msg.sender, _optionIndex);
    }

    // Function to get the total number of options
    function getOptionsCount() external view returns (uint256) {
        return options.length;
    }

    function getOption(uint256 _optionIndex) external view returns (string memory name, uint256 voteCount) {
        require(_optionIndex < options.length, "Invalid option index");
        Option storage option = options[_optionIndex];
        return (option.name, option.voteCount);
    }
}
